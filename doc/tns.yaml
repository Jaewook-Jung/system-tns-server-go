swagger: '2.0'
info:
  title: TNS REST APIs
  description: Topic Name Service(TNS)
  version: v1-20180509
schemes:
  - http
tags:
  - name: TNS REST APIs
    description: Topic Name Service(TNS)
paths:
  /api/v1/tns/topic:
    get:
      tags:
        - Discovery
      description: >
        This API can be used for request of topic data registered by the data
        publisher. Basically all of the topic data stored in TNS server are
        transfered as a response. Here the topic data includes name of topic,
        endpoint address such as IP and Port and data model ID. Additionally,
        the API supports name matching or hierarchical topic discovery by using
        query statement. For example, you can retrive a name maching topic data
        like "/api/v1/tns/topic?name=/a/b. In this case, only the topic data
        having /a/b as the name is returned. As for hierarchical topic discovery,
        you can look it up like "/api/v1/tns/topic?name=/a/b&hierarchical=yes".
        Then all the multiple topic data having /a/b/ in the top fields can be
        returned. 
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: name
          type: string
          description: the name of topic for discovery
        - in: query
          name: hierarchical
          type: string
          description: option for hierarchical topic discovery
      responses:
        '200':
          description: >-
            SUCCESS | TNS server responses a result code with topic data as
            following example.
          schema:
            $ref: '#/definitions/topics'
        '400':
          description: BAD REQUEST (eg. invalid query)
        '404':
          description: NOT FOUND (eg. topic not found)
        '500':
          description: INTERNAL SERVER ERROR (eg. DB operation failed)
    post:
      tags:
        - Registration
      description: >
        Topic information including the name of topic, publisher endpoint
        address and data model ID is registered and stored in TNS server. As the
        result, Keep Alive(KA) interval time (second) is responsed to the client
        if registered successfully.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: topic
          description: information of topic to be registered
          required: true
          schema:
            $ref: "#/definitions/topic"
      responses:
        '201':
          description: CREATED
          schema:
            $ref: '#/definitions/keepalive_interval'
        '400':
          description: BAD REQUEST (eg. invalid json)
        '409':
          description: CONFLICT (eg. already exists)
        '500':
          description: INTERNAL SERVER ERROR (eg. DB operation failed)
    delete:
      tags:
        - Unregistration
      description: >
        Topic data registred in TNS server is deleted by this reqeust. The
        deleting topic is indicated by using query like
        "/api/v1/tns/topic?name=/a/b/c". Note that hierarchy or wildcard option
        is not supported for this API.
      parameters:
        - in: query
          name: name
          type: string
          description: the name of topic for unregistration
      responses:
        '200':
          description: SUCCESS
        '400':
          description: BAD REQUEST (eg. request with hierarchical or wildcard option)
        '404':
          description: NOT FOUND
  /api/v1/tns/keepalive:
    post:
      tags:
        - KeepAlive
      description: >
        This API is used for transmitting keep alive signal with topic names so
        that TNS server update the the alive time of the topic not to be
        expired.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: topic_names
          description: the names of active topics
          required: true
          schema:
            $ref: '#/definitions/topic_names'
      responses:
        '200':
          description: SUCCESS
        '404':
          description: |-
            NOT FOUND |
            the invalid topic names are returned.
          schema:
            type: object
            properties:
              topic_names:
                $ref: '#/definitions/topic_names'
definitions:
  topic_info:
    type: object
    required:
      - name
      - endpoint
      - datamodel
    properties:
      name:
        type: string
        example: '/a/b/c'
      endpoint:
        type: string
        example: '123.123.123.123:55555'
      datamodel:
        type: string
        example: 'GTC_Robot_0.0.1'
  topic:
    required:
      - topic
    properties:
      topic:
        $ref: '#/definitions/topic_info'
  topics:
    required:
      - topics
    properties:
      topics:
        type: array
        items:
          $ref: '#/definitions/topic_info'
  keepalive_interval:
    required:
      - ka_interval
    properties:
      ka_interval:
        type: integer
        example: 180
  topic_names:
    type: array
    items:
      type: string
    example: ['/a/b/c', '/a/b/d']
