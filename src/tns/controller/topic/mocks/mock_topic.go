/*******************************************************************************
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: topic.go

// Package mock_topic is a generated GoMock package.
package mock_topic

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method
func (m *MockCommand) CreateTopic(body string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "CreateTopic", body)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockCommandMockRecorder) CreateTopic(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockCommand)(nil).CreateTopic), body)
}

// ReadTopic mocks base method
func (m *MockCommand) ReadTopic(name string, hierarchical bool) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "ReadTopic", name, hierarchical)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTopic indicates an expected call of ReadTopic
func (mr *MockCommandMockRecorder) ReadTopic(name, hierarchical interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopic", reflect.TypeOf((*MockCommand)(nil).ReadTopic), name, hierarchical)
}

// DelteTopic mocks base method
func (m *MockCommand) DelteTopic(name string) error {
	ret := m.ctrl.Call(m, "DelteTopic", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelteTopic indicates an expected call of DelteTopic
func (mr *MockCommandMockRecorder) DelteTopic(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelteTopic", reflect.TypeOf((*MockCommand)(nil).DelteTopic), name)
}
