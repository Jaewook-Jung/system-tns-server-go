/*******************************************************************************
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: keepalive.go

// Package mock_keepalive is a generated GoMock package.
package mock_keepalive

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// InitKeepAlive mocks base method
func (m *MockCommand) InitKeepAlive(interval uint) error {
	ret := m.ctrl.Call(m, "InitKeepAlive", interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitKeepAlive indicates an expected call of InitKeepAlive
func (mr *MockCommandMockRecorder) InitKeepAlive(interval interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitKeepAlive", reflect.TypeOf((*MockCommand)(nil).InitKeepAlive), interval)
}

// AddTopic mocks base method
func (m *MockCommand) AddTopic(name string) {
	m.ctrl.Call(m, "AddTopic", name)
}

// AddTopic indicates an expected call of AddTopic
func (mr *MockCommandMockRecorder) AddTopic(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTopic", reflect.TypeOf((*MockCommand)(nil).AddTopic), name)
}

// DeleteTopic mocks base method
func (m *MockCommand) DeleteTopic(name string) {
	m.ctrl.Call(m, "DeleteTopic", name)
}

// DeleteTopic indicates an expected call of DeleteTopic
func (mr *MockCommandMockRecorder) DeleteTopic(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockCommand)(nil).DeleteTopic), name)
}

// HandlePing mocks base method
func (m *MockCommand) HandlePing(body string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "HandlePing", body)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePing indicates an expected call of HandlePing
func (mr *MockCommandMockRecorder) HandlePing(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePing", reflect.TypeOf((*MockCommand)(nil).HandlePing), body)
}

// GetInterval mocks base method
func (m *MockCommand) GetInterval() uint {
	ret := m.ctrl.Call(m, "GetInterval")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetInterval indicates an expected call of GetInterval
func (mr *MockCommandMockRecorder) GetInterval() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterval", reflect.TypeOf((*MockCommand)(nil).GetInterval))
}
